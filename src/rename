#!/usr/bin/env python


### WARNING ###
# USE THIS PROGRAM WITH PYTHON 2.7.* 
# Matteo Schiavinato
# 2016
# BOKU - Vienna Institute of Biotechnology


# import modules
import sys
import argparse
import time
import itertools

# parser
parser = argparse.ArgumentParser()
parser.add_argument("-R1", "--read-file-1", help="The reads file 1 (in case of single end reads, the only one that you have to specify.", metavar="PATH", required=True) 
parser.add_argument("-R2", "--read-file-2", help="The reads file 2, use only when the reads are paired-end.", metavar="PATH")
parser.add_argument("-o", "--output-directory", help="Specify the path to the output directory you want your output files in. Default=CURRENT", default=".", metavar="PATH")
parser.add_argument("-t", "--reads-type", help="Specify \"PE\" for paired-end reads and \"SE\" for single-end reads.", metavar="PE|SE", required=True)
parser.add_argument("--basename", help="Each of the output files will have this basename followed by the correspondant input file name", metavar="NAME", required=True)
parser.add_argument("--separator", help="Default: \"/\". Reads will be renamed like /1 and /2, which is strongly recommended if you are then running the Augustus pipeline for gene prediction.", metavar="CHARACTER", default="/")
parser.add_argument("--use-for-rev", help="Use the /for - /rev notation instead of /1 - /2. Use only with paired-end reads.", action="store_true") 
parser.add_argument("--fasta", help="The program will consider the reads to be in FASTA format (default is FASTQ).", action="store_true")
parser.add_argument("--keep-name-prefix", help="For paired-end reads only. Instead of renaming the reads like <FILENAME>/1 and <FILENAME>/2, the program will keep the name of the reads up to the first [TAB] or [SPACE] and add a /1 - /2 (or /for - /rev) to the end.", action="store_true")

args = parser.parse_args()

# verifications
if (args.use_for_rev or args.read_file_2 or args.keep_name_prefix) and (args.reads_type == "SE"):
	sys.exit("[ {0} ]\tWARNING: The [--use-for-rev], [--read-file-2], [--keep-name-prefix] options are meant to be used only with paired-end reads.\nYou specified [--reads-type] as single-end\n".format(time.asctime()))
if (not args.read_file_2) and (args.reads_type == "PE"):
	sys.exit("[ {0} ]\tWARNING: If you use paired-end reads [--reads-type PE] you must specify a second reads file with [--read-file-2]\n".format(time.asctime()))

# define read suffixes and prefixes
if args.use_for_rev:
	reads_suffix = ("for", "rev")
else:
	reads_suffix = ("1", "2")

bad_chars = [":", ".", "_", "/", "-"]

if args.fasta:
	prefix = ">"
else:
	prefix = "@"

# SINGLE END READS
if args.reads_type == "SE":
	filename = args.read_file_1.split("/")[-1]
        k=1
        counter=0
        filename = args.read_file_1.split("/")[-1]
        OUTPUT = open("{0}/renamed.{1}".format(args.output_directory, filename), "w")
        sys.stderr.write("[ {0} ]\tReading single-end reads file and writing to output\n".format(time.asctime()))
        INPUT = open(args.read_file_1, "r")
        for line in INPUT:
		if k==1:
                        counter += 1
                        name = prefix + args.basename + args.separator + str(counter)
                        print >>OUTPUT, name
                        k+=1
		elif k==2:
                        print >>OUTPUT, line.rstrip()
                        k+=1
                        if args.fasta:
                                k=1
                elif (not args.fasta) and (k==3):
                        print >>OUTPUT, line.rstrip()
                        k+=1
                elif (not args.fasta) and (k==4):
                        print >>OUTPUT, line.rstrip()
                        k=1
	#
        sys.stderr.write("[ {0} ]\tFinished writing. Check your output at:\n\t - {1}/renamed.{2}\n".format(time.asctime(), args.output_directory.rstrip("/"), filename))

# PAIRED END READS
if args.reads_type == "PE":
	k=1
	counter=0
	filename_1 = args.read_file_1.split("/")[-1]
	filename_2 = args.read_file_2.split("/")[-1]
	OUTPUT_1 = open("{0}/renamed.{1}".format(args.output_directory, filename_1), "w")
	OUTPUT_2 = open("{0}/renamed.{1}".format(args.output_directory, filename_2), "w")
	sys.stderr.write("[ {0} ]\tReading paired-end read files and writing to output\n".format(time.asctime()))
	with open(args.read_file_1, "r") as INPUT_1:
		with open(args.read_file_2, "r") as INPUT_2:
			for line_x, line_y in itertools.izip(INPUT_1, INPUT_2):
				if k==1:
					counter += 1
					if args.keep_name_prefix:
						pre_x = line_x.rstrip().split()[0]
						pre_y = line_y.rstrip().split()[0]
						while (pre_x != pre_y):
							pre_x = pre_x[:-1]
							pre_y = pre_y[:-1]
							#
						while ((pre_x[-1] in bad_chars) or (pre_y[-1] in bad_chars)):
							pre_x = pre_x[:-1]
							pre_y = pre_y[:-1]
							#
						name_x = pre_x + args.separator + str(reads_suffix[0])
						name_y = pre_y + args.separator + str(reads_suffix[1])
					else:
						name_x = prefix + args.basename + "_" + str(counter) + args.separator + str(reads_suffix[0])
						name_y = prefix + args.basename + "_" + str(counter) + args.separator + str(reads_suffix[1])
					print >>OUTPUT_1, name_x
					print >>OUTPUT_2, name_y
					k+=1
				elif k==2:
					print >>OUTPUT_1, line_x.rstrip()
					print >>OUTPUT_2, line_y.rstrip()
					k+=1
					if args.fasta:
						k=1
				elif (not args.fasta) and (k==3):
					print >>OUTPUT_1, line_x.rstrip()
					print >>OUTPUT_2, line_y.rstrip()
					k+=1
				elif (not args.fasta) and (k==4):
					print >>OUTPUT_1, line_x.rstrip()
					print >>OUTPUT_2, line_y.rstrip()
					k=1
		#
	sys.stderr.write("[ {0} ]\tFinished writing. Check your output at:\n\t - {1}/renamed.{2}\n\t - {1}/renamed.{3}\n".format(time.asctime(), args.output_directory.rstrip("/"), filename_1, filename_2))
