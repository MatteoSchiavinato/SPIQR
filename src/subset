#!/usr/bin/env python


### WARNING ###
# USE THIS PROGRAM WITH PYTHON 2.7.* 
# Matteo Schiavinato
# 2016
# BOKU - Vienna Institute of Biotechnology


# import modules
import sys
import argparse
import time
import itertools
import random


# parser
parser = argparse.ArgumentParser()
inputcmd = parser.add_argument_group("++++++++++++ INPUT OPTIONS ++++++++++++")
subsetcmd = parser.add_argument_group("++++++++++++ SUBSETTING OPTIONS ++++++++++++")
outputcmd = parser.add_argument_group("++++++++++++ OUTPUT OPTIONS ++++++++++++")
inputcmd.add_argument("-R1", "--reads-file-1", help="The input file (if paired end, the R1 file). Can be in FASTA or FASTQ format.", required=True, metavar="FASTA/Q FILE")
inputcmd.add_argument("-R2", "--reads-file-2", help="The R2 file (in case of paired end reads).", metavar="FASTA/Q FILE")
inputcmd.add_argument("-t", "--reads-type", help="Specify \"PE\" for paired-end reads, or \"SE\" for single-end reads.", required=True, metavar="PE|SE")
inputcmd.add_argument("--fasta", help="Use if your reads are in FASTA format.", action="store_true")
subsetcmd.add_argument("-n", "--number-of-reads", help="How many reads do you want in your subset?", metavar="N", required=True, type=int)
outputcmd.add_argument("-o", "--output-directory", help="Where to place the output files. [Default: current]", default=".")
outputcmd.add_argument("-b", "--basename", help="Every output file will have this basename. [Default: \"subset\"]", default="subset")
args = parser.parse_args()

sys.stderr.write("[ {0} ]\tArguments parsed correctly\n".format(time.asctime()))


# verifications
FILENAME_R1 = args.reads_file_1.split("/")[-1]
if args.reads_file_2:
	FILENAME_R2 = args.reads_file_2.split("/")[-1]

# subsetting
### save all the read IDs
if args.reads_type == "SE":
	sys.stderr.write("[ {0} ]\tActing in: SINGLE END mode\n".format(time.asctime()))
	NAMES = []
	INPUT = open(args.reads_file_1, "r")
	k=0
	for line in INPUT:
		k+=1
		if k == 1:
			NAMES.append(line.rstrip())
		elif k == 2:
			if args.fasta:
				k=0
		elif k == 3:
			pass
		elif k == 4:
			k=0
	INPUT.close()
	SAMPLED = random.sample(NAMES, args.number_of_reads)
	sys.stderr.write("[ {0} ]\tSampled: {1} reads\n".format(time.asctime(), len(SAMPLED)))
	INPUT = open(args.reads_file_1, "r")
	OUTPUT = open("{0}/{1}.{2}".format(args.output_directory, args.basename, FILENAME_R1), "w")
        k=0
	print_switch = "off"
        for line in INPUT:
                k+=1
                if k == 1:
                        if line.rstrip() in SAMPLED:
				print_switch = "on"
				print >>OUTPUT, line.rstrip()
                elif (k == 2):	
			if print_switch == "on":
	               		print >>OUTPUT, line.rstrip()
			if args.fasta:
				print_switch = "off"
				k=0
                elif (k == 3) and (print_switch == "on"):
                        print >>OUTPUT, line.rstrip()
                elif (k == 4):
			if print_switch == "on":
				print >>OUTPUT, line.rstrip()
			print_switch = "off"
                        k=0
        INPUT.close()
	OUTPUT.close()
	sys.stderr.write("[ {0} ]\tDone. Check your output at: {1}/{2}.{3}\n".format(time.asctime(), args.output_directory, args.basename, FILENAME_R1))
	#
#	
elif args.reads_type == "PE":
	sys.stderr.write("[ {0} ]\tActing in: PAIRED END mode\n".format(time.asctime()))
        NAMES = {}
	INPUT=open(args.reads_file_1, "r")
        k=0
	counter=0
        for line in INPUT:
                k+=1
                if k == 1:
			counter += 1
                        NAMES[line.rstrip()] = counter
                elif k == 2:
                        if args.fasta:
                                k=0
                elif k == 3:
                        pass
                elif k == 4:
                        k=0
        INPUT.close()
        SAMPLED = random.sample(NAMES.keys(), args.number_of_reads)
	INDEXES = []
	for READNAME in SAMPLED:
		INDEXES.append(NAMES[READNAME])
		#
	INDEXES_sorted = list(sorted(INDEXES))
        sys.stderr.write("[ {0} ]\tSampled: {1} reads\n".format(time.asctime(), len(SAMPLED)))
	with open(args.reads_file_1, "r") as INPUT_1:
		with open(args.reads_file_2, "r") as INPUT_2:
			OUTPUT_1 = open("{0}/{1}.{2}".format(args.output_directory, args.basename, FILENAME_R1), "w")
			OUTPUT_2 = open("{0}/{1}.{2}".format(args.output_directory, args.basename, FILENAME_R2), "w")
			k=0
			j=0
			counter=0
			print_switch = "off"
			for line_x, line_y in itertools.izip(INPUT_1, INPUT_2):
				if (j <= len(INDEXES_sorted)-1):
					k+=1
					if k == 1:
						counter+=1
						index = INDEXES_sorted[j]
						if (counter == index):
							print_switch = "on"
							print >>OUTPUT_1, line_x.rstrip()
							print >>OUTPUT_2, line_y.rstrip()
					elif (k == 2):
						if print_switch == "on":
							print >>OUTPUT_1, line_x.rstrip()
							print >>OUTPUT_2, line_y.rstrip()
						if args.fasta:
							print_switch = "off"
							k=0
					elif (k == 3) and (print_switch == "on"):
						print >>OUTPUT_1, line_x.rstrip()
						print >>OUTPUT_2, line_y.rstrip()
					elif (k == 4):
						if print_switch == "on":
							print >>OUTPUT_1, line_x.rstrip()
							print >>OUTPUT_2, line_y.rstrip()
							j+=1
						print_switch = "off"
						k=0
				else:
					break
			INPUT_1.close()
			INPUT_2.close()
			OUTPUT_1.close()
			OUTPUT_2.close()
			sys.stderr.write("[ {0} ]\tDone. Check your output at:\n\t\t\t - {1}/{2}.{3}\n\t\t\t - {1}/{2}.{4}\n".format(time.asctime(), args.output_directory, args.basename, FILENAME_R1, FILENAME_R2))
