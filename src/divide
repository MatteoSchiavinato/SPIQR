#!/usr/bin/env python 


### WARNING ###
# USE THIS PROGRAM WITH PYTHON 2.7.*
# Matteo Schiavinato
# 2016
# BOKU - Vienna Institute of Biotechnology


# modules
import sys
import argparse
import time
import os.path

#argument_parser
parser = argparse.ArgumentParser(prog="SPIQR divide", formatter_class=argparse.RawDescriptionHelpFormatter, description='''
----------------------------------------------------------------------------
### Matteo Schiavinato # 2016 # BOKU - Vienna Institute of Biotechnology ###
----------------------------------------------------------------------------
'''
, usage="\n\n\nSPIQR divide [options]\n\n\n")
parser.add_argument("-i", "--input-file", help="The input file. It must be a FASTA or FASTQ file. It can be a reads file in both formats, or whatever MULTIFASTA file. For FASTQ files, only files with the sequence in a single line (the second line) will generate a valid output.", required=True)
parser.add_argument("-o", "--outdir", help="The output directory.", default=".")
parser.add_argument("-t", "--sequences-type", help="Specify if your sequences are \"fasta\" or \"fastq\" format (\"fa\" for FASTA; \"fastq\" for FASTQ).")
parser.add_argument("--number-of-sequences", help="The number of sequences for each chunk. After the subsetting, each output file will contain N sequences, except for the last file which will contain what's left. This argument is to be used only if the \"number-of-chunks\" is not.", type=int)
parser.add_argument("--number-of-chunks", help="The number of chunks that will be generated. Each chunk will have approximately the same dimension. This argument must be used only if the \"number-of-sequences\" argument is not.", type=int)
args = parser.parse_args()

#input_file_reading
sys.stderr.write("[{0}]\tReading input file\n".format(time.asctime()))
INPUT = open(args.input_file, "r")
filename = os.path.basename(os.path.splitext(args.input_file)[0])
if args.sequences_type == "fa":
	sequences_dic = {}
	for line in INPUT:
		x = line.rstrip()
		if x[0:1] == ">":
			name = x
			sequences_dic[name] = []
		else:
			sequences_dic[name].append(x)

elif args.sequences_type == "fastq":
	sequences_dic = {}
	k=0
	for line in INPUT:
		x = line.rstrip()
		if k%4 == 0:
			name = x
			sequences_dic[name] = []
			k+=1
		else:
			sequences_dic[name].append(x)
			k+=1

else:
	sys.exit("Specified sequence format looks not like \"fasta\" or \"fastq\".\nProgram will be closed.\n\n\n################\n\n\n")

INPUT.close()

#output_file_generation
if args.number_of_sequences:
	sys.stderr.write("[{0}]\tGenerating output files\n".format(time.asctime()))
	k=0
	file_number=1
	for entry in sequences_dic:
		if k == 0:
			OUTPUT = open("{0}/{1}.part_{2}.{3}".format(args.outdir, filename, file_number, args.sequences_type), "w")
		print >>OUTPUT, entry
		print >>OUTPUT, "\n".join(sequences_dic[entry])
		k+=1
		if k == args.number_of_sequences:
			file_number+=1
			k=0

elif args.number_of_chunks:
	sys.stderr.write("[{0}]\tEstimating chunk dimension\n".format(time.asctime()))
	input_size = int(os.path.getsize(args.input_file))
	size_threshold = int(input_size / args.number_of_chunks)
	sys.stderr.write("[{0}]\tInput Size: {1}\n".format(time.asctime(), input_size))
	sys.stderr.write("[{0}]\tNumber of Chunks: {1}\n".format(time.asctime(), args.number_of_chunks))
	sys.stderr.write("[{0}]\tSize Threshold: {1}\n".format(time.asctime(), size_threshold))
	sys.stderr.write("[{0}]\tGenerating output files\n".format(time.asctime()))
	k=0
	file_number=1
	for entry in sequences_dic:
		if k == 0:
			sys.stderr.write("[{0}]\tFile Number: {1}\n".format(time.asctime(), file_number))
			OUTPUT = open("{0}/{1}.part_{2}.{3}".format(args.outdir, filename, file_number, args.sequences_type), "w")
			sys.stderr.write("[{0}]\tWriting to output file {1}\n".format(time.asctime(), file_number))
			k=1
		print >>OUTPUT, entry
		print >>OUTPUT, "\n".join(sequences_dic[entry])
		if int(os.path.getsize("{0}/{1}.part_{2}.{3}".format(args.outdir, filename, file_number, args.sequences_type)))>=size_threshold:
			file_number += 1
			k=0

sys.stderr.write("[{0}]\tWrote output in {1} files.\n".format(time.asctime(), file_number))
timestamp_2 = time.asctime().split(" ")[3]
sys.stderr.write("[{0}]\tEnded work at {1}\n".format(time.asctime(), timestamp_2))
